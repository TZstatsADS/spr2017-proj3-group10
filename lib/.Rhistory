library("EBImage")
##读取同一目录下的所有文件
path <- "~/GitHub/spr2017-proj3-group10/data/testdata" ##文件目录
fileNames <- dir(path)  ##获取该路径下的文件名
filePath <- sapply(fileNames, function(x){
paste(path,x,sep='/')})   ##生成读取文件路径
data <- lapply(filePath, function(x){
readImage(x)})  ##读取数据，结果为list
##从数据库中读取数据类似上面，获取要数据库里的文件名，写个正则筛选文件名后for循环读取。
##读取同一目录下的所有文件
path <- "~/GitHub/spr2017-proj3-group10/data/rawdata" ##文件目录
fileNames <- dir(path)  ##获取该路径下的文件名
filePath <- sapply(fileNames, function(x){
paste(path,x,sep='/')})   ##生成读取文件路径
data <- lapply(filePath, function(x){
readImage(x)})  ##读取数据，结果为list
##读取同一目录下的所有文件
path <- "~/GitHub/spr2017-proj3-group10/data/data1" ##文件目录
fileNames <- dir(path)  ##获取该路径下的文件名
filePath <- sapply(fileNames, function(x){
paste(path,x,sep='/')})   ##生成读取文件路径
data <- lapply(filePath, function(x){
readImage(x)})  ##读取数据，结果为list
##读取同一目录下的所有文件
path <- "~/GitHub/spr2017-proj3-group10/data/testdata" ##文件目录
fileNames <- dir(path)  ##获取该路径下的文件名
filePath <- sapply(fileNames, function(x){
paste(path,x,sep='/')})   ##生成读取文件路径
data <- lapply(filePath, function(x){
readImage(x)})  ##读取数据，结果为list
##从数据库中读取数据类似上面，获取要数据库里的文件名，写个正则筛选文件名后for循环读取。
data
img_dir<-"C:/Users/sh355/Documents/GitHub/spr2017-proj3-group10/data/rawdata"
n_files <- length(list.files(img_dir))
files = list.files(img_dir)
im<-list()
for(i in 1:n_files){
img <- readImage(paste(img_dir, files[i], sep='/'))
im[[i]]<-resize(img, 128, 128)
}
feature_up <- function(img_dir, set_name, export=T){
### Construct process features for training/testing images
### Sample simple feature: Extract row average raw pixel values as features
### Input: a directory that contains images ready for processing
### Output: an .RData file contains processed features for the images
### load libraries
library("EBImage")
n_files <- length(list.files(img_dir))
files = list.files(img_dir)
### determine img dimensions
img0 <-  readImage(paste(img_dir, files[1], sep='/'))
mat1 <- as.matrix(img0)
n_r <- nrow(img0)
### store vectorized pixel values of images
dat <- matrix(NA, n_files, n_r)
for(i in 1:n_files){
img <- readImage(paste(img_dir, files[i], sep='/'))
dat[i,] <- rowMeans(img)
}
### output constructed features
if(export){
save(dat, file=paste0("../output/feature_", set_name, ".RData"))
}
return(dat)
}
library("EBImage")
img_dir<-"C:/Users/sh355/Documents/GitHub/spr2017-proj3-group10/data/rawdata"
n_files <- length(list.files(img_dir))
files = list.files(img_dir)
im<-list()
for(i in 1:n_files){
img <- readImage(paste(img_dir, files[i], sep='/'))
im[[i]]<-resize(img, 128, 128)
}
setwd("~/GitHub/spr2017-proj3-group10/data/resizedata")
for (i in 1:n_files){
writeImage(im[[i]], paste("image_", i,".jpg", sep=""))
}
setwd("~/GitHub/spr2017-proj3-group10/data/resizedata")
for (i in 1:n_files){
writeImage(im[[i]], paste("image_", i,".jpg", sep=""))
}
setwd("~/GitHub/spr2017-proj3-group10/lib")
library(rPython)
python.load("test_sift.py")
descs_list <- python.get("descs_list")
# Convert list to array
# img_descs <- do.call()
# length(img_descs)
length(descs_list)
#img_sift <- do.call("rbind", img_descs)
img_sift <- do.call("rbind", descs_list)
dim(img_sift)
img_sift[1:5, 1:5]
python.load("test_sift.py")
python.load("test_sift.py")
descs_list <- python.get("descs_list")
# Convert list to array
# img_descs <- do.call()
# length(img_descs)
length(descs_list)
#img_sift <- do.call("rbind", img_descs)
img_sift <- do.call("rbind", descs_list)
dim(img_sift)
img_sift[1:5, 1:5]
